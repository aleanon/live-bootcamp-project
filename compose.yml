services:
  app-service:
    image: aleanton/app-service
    restart: "always"
    environment:
      AUTH_SERVICE_IP: ${AUTH_SERVICE_IP:-localhost}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL:-http://localhost:3000}
    expose:
      - "8000"
    networks:
      - backend
  auth-service:
    image: aleanton/auth-service
    restart: "always"
    environment:
      JWT_SECRET: ${JWT_SECRET}
      JWT_ELEVATED_SECRET: ${JWT_ELEVATED_SECRET}
      AUTH_SERVICE_ALLOWED_ORIGINS: ${AUTH_SERVICE_ALLOWED_ORIGINS}
      DATABASE_URL: "postgres://postgres:${POSTGRES_PASSWORD}@db:5432"
      POSTMARK_AUTH_TOKEN: ${POSTMARK_AUTH_TOKEN}
    expose:
      - "3000"
    networks:
      - internal
      - backend
    volumes:
      - "auth-config:/config"
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started

  db:
    image: postgres:15.4-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    expose:
      - "5432"
    networks:
      - internal
    volumes:
      - db:/var/lib/postgresql/data

  redis:
    image: redis:7.0-alpine
    restart: always
    expose:
      - "6379"
    networks:
      - internal

  reverse-proxy:
    image: caddy:2
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend

volumes:
  auth-config:
    name: project_auth_config
  db:
    name: project_db
    driver: local
  caddy_data:
    name: project_caddy_data
  caddy_config:
    name: project_caddy_config

networks:
  internal:
    name: project_internal
  backend:
    name: project_backend
